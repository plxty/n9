#!/usr/bin/env nix
#!nix shell github:zhaofengli/colmena#colmena --accept-flake-config --command bash

# TODO: nix run

set -ue

# To prevent from overriding the default environ... TODO: better way?
BURN_HOSTNAME="$(hostname)"
BURN_SOURCE="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
BURN_BULK=
BURN_FIRE=
BURN_SHELL=false
BURN_GC=false
BURN_OP=apply

while [[ "${1:-}" != "" ]]; do
  case "$1" in
  "--help")
    echo "$0 [options] [sub]"
    echo "  options:"
    echo "    --bulk [hosts]     burn them all, hosts can be empty"
    echo "    --fire [host]      set a new machine on fire"
    echo "    --shell            to test the mars"
    echo "    --gc               to collect some garbage back"
    echo "    --debug            give me some annoying messages"
    echo "  sub (--bulk):"
    echo "    --exec             exec instead of apply"
    echo "    https://colmena.cli.rs/unstable/reference/cli.html"
    echo "  sub (--fire):"
    echo "    https://github.com/nix-community/nixos-anywhere/blob/main/src/nixos-anywhere.sh"
    exit 0 ;;
  "--bulk")
    BURN_BULK="*"
    if [[ "${2:-}" != "" && "$2" != "-"* ]]; then
      BURN_BULK="$2"
      shift 1
    fi ;;
  "--fire")
    BURN_FIRE="$2"
    shift 1 ;;
  "--shell")
    # Treat all remaining arguments as shell, TODO: `--`?
    BURN_SHELL=true
    shift 1
    break ;;
  "--gc")
    BURN_GC=true ;;
  "--debug")
    set -x ;;
  "--exec")
    BURN_OP="exec" ;;
  *)
    break ;;
  esac
  shift 1
done

if [[ "$BURN_FIRE" != "" && "$BURN_BULK" != "" ]]; then
  echo "error: --bulk and --fire are conflicted"
  exit 1
fi

function shell-switch() {
  # ./burn --shell nix eval --override-input n9 "$PWD/n9" --raw '.#colmenaHive.nodes'
  if $BURN_SHELL; then
    if [[ "$*" != "" ]]; then
      "$@"
    else
      bash
    fi
    exit $?
  fi
}

function source-setup() {
  local workdir="/tmp/n9"

  rm -rf "$workdir"
  rsync -a --exclude .git asterisk "$BURN_SOURCE/" "$workdir/"
  cd "$workdir"

  # Aka, "templating":
  find mach -name default.nix \
    -exec sed -i "s!@ASTERISK@!$BURN_SOURCE/asterisk!g" {} \;
}

function nixos-garbage() {
  local garbage=(nix-collect-garbage --delete-older-than 29d)

  # Both system-wide and home-wide.
  # TODO: Clean the remote machine?
  sudo "${garbage[@]}"
  "${garbage[@]}"
}

function nixos-install() {
  local config=".#nixosConfigurations.nodes.$BURN_FIRE.config"
  local deploy=".#colmenaHive.deploymentConfig.$BURN_FIRE"
  local hwconf="mach/$BURN_FIRE/hardware-configuration.nix"
  local sshopt=(-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no)
  local keys host port install key path

  # For machine that you want to install, there's a limitation of
  # nixos-anywhere that it only allow `nixosConfigurations.*`:
  sed -i -E 's/(colmenaHive.*=.*colmena.lib.makeHive)/nixosConfigurations = self.colmenaHive; \1/' \
    flake.nix

  # To trick nix eval:
  if [[ ! -f "$hwconf" ]]; then
    echo "{ ... }: { }" > "$hwconf"
  fi

  keys="$(nix eval --json "$deploy.keys" \
    | jq -r 'to_entries[]
      | select(.value.user == "root" and .value.uploadAt == "pre-activation")
      | [.value.keyFile, .value.path] | @tsv')"

  read -r host port < \
    <(nix eval --json "$deploy" --apply "a:[a.targetHost a.targetPort]" | jq -r '@tsv')

  # Forced to be root, to avoid sudo and trusted user problem:
  host="root@$host"
  if [[ "$port" == "null" ]]; then
    port="22"
  fi

  # All options can be overrided after --:
  install=(nix run github:nix-community/nixos-anywhere --
    --generate-hardware-config nixos-generate-config "$hwconf" --flake "$config"
    --target-host "$host" -p "$port")

  # Hold a moment :)
  shell-switch "$@"

  # Make disk layout, and mount /run for keys (from livecd):
  "${install[@]}" --phases kexec,disko "$@"
  ssh "${sshopt[@]}" -p "$port" "$host" -- "
    umount -R /mnt/run
    mount -m -t tmpfs -o rw,nosuid,nodev,mode=755 tmpfs /mnt/run
    mount -m -t ramfs -o rw,nosuid,nodev,relatime,mode=750 ramfs /mnt/run/keys
  "

  while read -r key path; do
    if [[ "$path" != "/run/keys/"* ]]; then
      echo "warn: non-temporal \"$key -> $path\" will be ignored"
      continue
    fi
    echo "key: $key -> $path"
    scp "${sshopt[@]}" -P "$port" "$key" "$host:/mnt$path"
  done <<< "$keys"

  # Real install and switch:
  "${install[@]}" --phases install,reboot "$@"
  cp -f "$hwconf" "$BURN_SOURCE/$hwconf"
}

function nixos-switch() {
  local colmena=(colmena --show-trace --experimental-flake-eval) hosts=()
  local hwconf="mach/$BURN_HOSTNAME/hardware-configuration.nix"
  local haslocal=true

  if [[ "$BURN_BULK" == "*" ]]; then
    for host in *; do
      if [[ -d "$host" && "$host" != "$BURN_HOSTNAME" ]]; then
        hosts+=("$host")
      fi
    done
  elif [[ "$BURN_BULK" != "" && "$BURN_BULK" != "$BURN_HOSTNAME" ]]; then
    hosts=("$BURN_BULK")
    haslocal=false
  fi

  # Hold a moment :)
  shell-switch "$@"

  if [[ "${hosts[*]}" != "" ]]; then
    "${colmena[@]}" $BURN_OP --on "$(IFS=, ; echo "${hosts[*]}")" --verbose "$@"
  elif $haslocal && [[ "$BURN_OP" == "apply" ]]; then
    # shellcheck disable=SC2024
    sudo nixos-generate-config --show-hardware-config --no-filesystems > "$hwconf"
    "${colmena[@]}" apply-local --sudo --verbose "$@"
    cp -f "$hwconf" "$BURN_SOURCE/$hwconf"
  fi
}

function main() {
  if $BURN_GC; then
    nixos-garbage
    return
  fi

  source-setup "$@"
  if [[ "$BURN_FIRE" != "" ]]; then
    nixos-install "$@"
  else
    nixos-switch "$@"
  fi
}

main "$@"
