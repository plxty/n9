actions:
  # Partition Disk
  # ==============
  # /efi ~1GiB, swap 15GiB, root remains
  - action: command.run
    where: '!variables.disk.is_empty && variables.wipe'
    command: parted
    args:
      - '{{ variables.disk }}'
      - --script
      - --
      - mklabel gpt
      - mkpart "EFI system partition" fat32 1MiB 1GiB
      - set 1 esp on
      - mkpart swap linux-swap 1GiB 16GiB
      - mkpart root btrfs 16GiB 100%
  # Make Filesystems
  # ================
  # /efi fat32, swap swap, root btrfs
  - action: command.run
    where: '!variables.partition.is_empty && variables.wipe'
    command: mkfs
    args: [-t]
    xargs:
      - [fat, -F, "32", -n, boot, "{{ variables.partition }}1"]
      - [btrfs, "{{ variables.partition }}3"]
  # Swap here is not for hibernating, is for reducing the memory pressure.
  # Also you can reuse it when you need, such as LUKS, or /efi expansion.
  # https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/managing_storage_devices/getting-started-with-swap_managing-storage-devices
  - action: command.run
    where: '!variables.partition.is_empty && variables.wipe'
    command: mkswap
    args: [-L, swap, "{{ variables.partition }}2"]
  # Btrfs Subvolumes
  # ================
  # @root /, @home /home, @nix /nix
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty && variables.wipe'
    command: mount
    args: ["{{ variables.partition}}3", "{{ variables.root }}"]
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty && variables.wipe'
    command: btrfs
    args:
      - subvolume
      - create
      - '{{ variables.root }}/@root'
      - '{{ variables.root }}/@home'
      - '{{ variables.root }}/@nix'
  # Mount Rootfs, Swap
  # ==================
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty'
    command: umount
    args: [-R, "{{ variables.root }}"]
    ignore_errors: true
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty'
    command: mount
    args: [-m]
    xargs:
      - [-o, compress=zstd,subvol=@root, "{{ variables.partition }}3", "{{ variables.root }}"]
      - ["{{ variables.partition }}1", "{{ variables.root }}/efi"]
      - [-o, compress=zstd,subvol=@home, "{{ variables.partition }}3", "{{ variables.root }}/home"]
      - [-o, compress=zstd,noatime,subvol=@nix, "{{ variables.partition}}3", "{{ variables.root }}/nix"]
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty'
    command: swapoff
    args: ["{{ variables.partition }}2"]
    ignore_errors: true
  - action: command.run
    where: '!variables.partition.is_empty && !variables.root.is_empty'
    command: swapon
    args: ["{{ variables.partition }}2"]
  # NixOS Here
  # ==========
  # Should use the most recent NixOS ISO image to do a fresh install.
  - action: command.run
    command: nix-channel
    xargs:
      - [--add, "https://channels.nixos.org/nixos-{{ variables.channel }}", nixos]
      - [--update]
    variants:
      - where: '!variables.root.is_empty'
        command: nixos-generate-config
        args: [--root, "{{ variables.root }}"]
  - action: file.copy
    from: configuration.nix
    owned_by_group: root
    owned_by_user: root
    template: true
    to: '{{ variables.root }}/etc/nixos/configuration.nix'
  - action: command.run
    command: nixos-rebuild
    args: [switch, --upgrade]
    variants:
      - where: '!variables.root.is_empty'
        command: nixos-install
        args: [--root, "{{ variables.root }}"]
