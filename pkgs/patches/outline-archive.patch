commit 495dde1e23c5a57c40054903addf2f25bc432cc8
Author: Zigit Zo <repl@z.xas.is>
Date:   Fri Apr 11 16:41:37 2025 +0800

    https://github.com/outline/outline

diff --git a/.github/workflows/calibreapp-image-actions.yml b/.github/workflows/calibreapp-image-actions.yml
deleted file mode 100644
index d70ba3de9..000000000
--- a/.github/workflows/calibreapp-image-actions.yml
+++ /dev/null
@@ -1,61 +0,0 @@
-# Image Actions will run in the following scenarios:
-# - on Pull Requests containing images (not including forks)
-# - on pushing of images to `main` (for forks)
-# - on demand (https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/)
-# - at 11 PM every Sunday in anything gets missed with any of the above scenarios
-# For Pull Requests, the images are added to the PR.
-# For other scenarios, a new PR will be opened if any images are compressed.
-name: Compress images
-on:
-  pull_request:
-    paths:
-      - "**.jpg"
-      - "**.jpeg"
-      - "**.png"
-      - "**.webp"
-  push:
-    branches:
-      - main
-    paths:
-      - "**.jpg"
-      - "**.jpeg"
-      - "**.png"
-      - "**.webp"
-  workflow_dispatch:
-  schedule:
-    - cron: "00 20 * * 0"
-permissions: {}
-jobs:
-  build:
-    permissions:
-      contents: write
-      pull-requests: write #  to comment on pull request
-
-    name: calibreapp/image-actions
-    runs-on: ubuntu-latest
-    # Only run on main repo on and PRs that match the main repo.
-    if: |
-      github.repository == 'outline/outline' &&
-      (github.event_name != 'pull_request' ||
-       github.event.pull_request.head.repo.full_name == github.repository)
-    steps:
-      - name: Checkout Branch
-        uses: actions/checkout@v2
-      - name: Compress Images
-        id: calibre
-        uses: calibreapp/image-actions@main
-        with:
-          githubToken: ${{ secrets.GITHUB_TOKEN }}
-          # For non-Pull Requests, run in compressOnly mode and we'll PR after.
-          compressOnly: ${{ github.event_name != 'pull_request' }}
-      - name: Create Pull Request
-        # If it's not a Pull Request then commit any changes as a new PR.
-        if: |
-          github.event_name != 'pull_request' &&
-          steps.calibre.outputs.markdown != ''
-        uses: peter-evans/create-pull-request@v3
-        with:
-          title: "chore: Auto Compress Images"
-          branch-suffix: timestamp
-          commit-message: "chore: Compressed inefficient images automatically"
-          body: ${{ steps.calibre.outputs.markdown }}
diff --git a/.github/workflows/codeql-analysis.yml b/.github/workflows/codeql-analysis.yml
deleted file mode 100644
index 7ae11976f..000000000
--- a/.github/workflows/codeql-analysis.yml
+++ /dev/null
@@ -1,70 +0,0 @@
-# For most projects, this workflow file will not need changing; you simply need
-# to commit it to your repository.
-#
-# You may wish to alter this file to override the set of languages analyzed,
-# or to provide custom queries or build logic.
-#
-# ******** NOTE ********
-# We have attempted to detect the languages in your repository. Please check
-# the `language` matrix defined below to confirm you have the correct set of
-# supported CodeQL languages.
-#
-name: "CodeQL"
-
-on:
-  push:
-    branches: [ main ]
-  pull_request:
-    # The branches below must be a subset of the branches above
-    branches: [ main ]
-  schedule:
-    - cron: '28 15 * * 2'
-
-jobs:
-  analyze:
-    name: Analyze
-    runs-on: ubuntu-latest
-    permissions:
-      actions: read
-      contents: read
-      security-events: write
-
-    strategy:
-      fail-fast: false
-      matrix:
-        language: [ 'javascript' ]
-        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
-        # Learn more about CodeQL language support at https://git.io/codeql-language-support
-
-    steps:
-    - name: Checkout repository
-      uses: actions/checkout@v2
-
-    # Initializes the CodeQL tools for scanning.
-    - name: Initialize CodeQL
-      uses: github/codeql-action/init@v2
-      with:
-        languages: ${{ matrix.language }}
-        # If you wish to specify custom queries, you can do so here or in a config file.
-        # By default, queries listed here will override any specified in a config file.
-        # Prefix the list here with "+" to use these queries and those in the config file.
-        # queries: ./path/to/local/query, your-org/your-repo/queries@main
-
-    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
-    # If this step fails, then you should remove it and run the build manually (see below)
-    - name: Autobuild
-      uses: github/codeql-action/autobuild@v2
-
-    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
-    # üìö https://git.io/JvXDl
-
-    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
-    #    and modify them (or add more) to build your code if your project
-    #    uses a compiled language
-
-    #- run: |
-    #   make bootstrap
-    #   make release
-
-    - name: Perform CodeQL Analysis
-      uses: github/codeql-action/analyze@v2
diff --git a/.github/workflows/image.yml b/.github/workflows/image.yml
new file mode 100644
index 000000000..c1967c5f1
--- /dev/null
+++ b/.github/workflows/image.yml
@@ -0,0 +1,29 @@
+name: Build and Push docker image
+on: workflow_dispatch
+
+jobs:
+  image:
+    environment: Release
+    runs-on: ubuntu-latest
+    steps:
+      -
+        name: Login to Docker repository
+        uses: docker/login-action@v3
+        with:
+          registry: ${{ vars.DOCKER_REGISTRY }}
+          username: ${{ secrets.DOCKER_USERNAME }}
+          password: ${{ secrets.DOCKER_PASSWORD }}
+          ecr: false
+      -
+        name: Build base
+        uses: docker/build-push-action@v6
+        with:
+          load: true
+          file: Dockerfile.base
+          tags: outlinewiki/outline-base:latest
+      -
+        name: Build and Push release
+        uses: docker/build-push-action@v6
+        with:
+          push: true
+          tags: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_TAG }}
diff --git a/.github/workflows/stale.yml b/.github/workflows/stale.yml
deleted file mode 100644
index 4675694bf..000000000
--- a/.github/workflows/stale.yml
+++ /dev/null
@@ -1,29 +0,0 @@
-name: "Close Stale PRs"
-on:
-  workflow_dispatch:
-  schedule:
-    - cron: "30 1 * * *"
-
-permissions:
-  issues: write
-  pull-requests: write
-
-jobs:
-  stale:
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/stale@v5
-        with:
-          stale-pr-message: "This PR is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 5 days"
-          stale-issue-message: "This issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 5 days"
-          close-pr-message: "Automatically closed due to inactivity"
-          close-issue-message: "Automatically closed due to inactivity"
-          days-before-issue-stale: 120
-          days-before-pr-stale: 60
-          days-before-close: 5
-          operations-per-run: 60
-          stale-issue-label: stale
-          stale-pr-label: stale
-          exempt-issue-labels: "security,pinned,A1"
-      - name: Print outputs
-        run: echo ${{ join(steps.stale.outputs.*, ',') }}
diff --git a/Makefile b/Makefile
index 8d773aaa0..c26a042d7 100644
--- a/Makefile
+++ b/Makefile
@@ -1,28 +1,27 @@
 up:
-	docker compose up -d redis postgres
+	podman-compose up -d redis postgres
 	yarn install-local-ssl
 	yarn install --pure-lockfile
 	yarn dev:watch
 
+down:
+	podman-compose down -v
+
 build:
-	docker compose build --pull outline
+	podman build --pull .
 
 test:
-	docker compose up -d redis postgres
+	podman-compose up -d redis postgres
 	NODE_ENV=test yarn sequelize db:drop
 	NODE_ENV=test yarn sequelize db:create
 	NODE_ENV=test yarn sequelize db:migrate
 	yarn test
 
 watch:
-	docker compose up -d redis postgres
+	podman-compose up -d redis postgres
 	NODE_ENV=test yarn sequelize db:drop
 	NODE_ENV=test yarn sequelize db:create
 	NODE_ENV=test yarn sequelize db:migrate
 	yarn test:watch
 
-destroy:
-	docker compose stop
-	docker compose rm -f
-
-.PHONY: up build destroy test watch # let's go to reserve rules names
+.PHONY: up down build destroy test watch # let's go to reserve rules names
diff --git a/README.md b/README.md
index 096d2d518..8a111cebf 100644
--- a/README.md
+++ b/README.md
@@ -24,6 +24,21 @@ Please see the [documentation](https://docs.getoutline.com/s/hosting/) for runni
 
 If you have questions or improvements for the docs please create a thread in [GitHub discussions](https://github.com/outline/outline/discussions).
 
+# Hack
+
+* URI "/auth/email" will make you login directly, you can set up basic auth to
+  protect your login.
+
+* Clearbit avatar is removed.
+
+* Online version check is removed.
+
+* Add env `SHARE_FOOTER_TEXT` and `SHARE_FOOTER_HREF`, you can add one footer
+  when you share your post. Only one footer is supported for now :/
+
+* Add a request header `X-Outline-ShareId`, it reuses the `ROOT_SHARE_ID` of the
+  outline, now you can reverse proxy a shared page under subdomain or else.
+
 # Development
 
 There is a short guide for [setting up a development environment](https://docs.getoutline.com/s/hosting/doc/local-development-5hEhFRXow7) if you wish to contribute changes, fixes, and improvements to Outline.
diff --git a/app/components/Branding.tsx b/app/components/Branding.tsx
index 554086e8b..e30feb216 100644
--- a/app/components/Branding.tsx
+++ b/app/components/Branding.tsx
@@ -11,37 +11,47 @@ type Props = {
 
 function Branding({ href = env.URL }: Props) {
   return (
-    <Link href={href}>
-      <OutlineIcon size={20} />
-      &nbsp;{env.APP_NAME}
-    </Link>
+    <Div>
+      <Link href={href}>
+        <OutlineIcon size={20} />
+        &nbsp;{env.APP_NAME}
+      </Link>
+      {env.SHARE_FOOTER_TEXT && env.SHARE_FOOTER_HREF && (
+        <Link style={{ fontWeight: 400 }} href={env.SHARE_FOOTER_HREF}>
+          {env.SHARE_FOOTER_TEXT}
+        </Link>
+      )}
+    </Div>
   );
 }
 
-const Link = styled.a`
+const Div = styled.div`
+  display: flex;
   justify-content: center;
-  padding-bottom: 16px;
+  align-items: center;
+
+  ${breakpoint("tablet")`
+    z-index: ${depths.sidebar + 1};
+    position: fixed;
+    bottom: 0;
+    right: 0;
+  `};
+`;
 
+const Link = styled.a`
   font-weight: 600;
   font-size: 14px;
   text-decoration: none;
-  border-top-right-radius: 2px;
   color: ${s("text")};
   display: flex;
-  align-items: center;
 
   svg {
     fill: ${s("text")};
   }
 
+  padding: 8px 12px;
   ${breakpoint("tablet")`
-    z-index: ${depths.sidebar + 1};
     background: ${s("sidebarBackground")};
-    position: fixed;
-    bottom: 0;
-    right: 0;
-    padding: 16px;
-
     &:hover {
       background: ${s("sidebarControlHoverBackground")};
     }
diff --git a/app/scenes/Document/components/Document.tsx b/app/scenes/Document/components/Document.tsx
index fd61eca3a..6a1f05a05 100644
--- a/app/scenes/Document/components/Document.tsx
+++ b/app/scenes/Document/components/Document.tsx
@@ -27,7 +27,6 @@ import {
 } from "@shared/types";
 import { ProsemirrorHelper } from "@shared/utils/ProsemirrorHelper";
 import { TextHelper } from "@shared/utils/TextHelper";
-import { parseDomain } from "@shared/utils/domains";
 import { determineIconType } from "@shared/utils/icon";
 import { isModKey } from "@shared/utils/keyboard";
 import RootStore from "~/stores/RootStore";
@@ -610,11 +609,9 @@ class DocumentScene extends React.Component<Props> {
                 )}
               </React.Suspense>
             </Main>
-            {isShare &&
-              !parseDomain(window.location.origin).custom &&
-              !auth.user && (
-                <Branding href="//www.getoutline.com?ref=sharelink" />
-              )}
+            {isShare && !auth.user && (
+              <Branding href="//www.getoutline.com?ref=sharelink" />
+            )}
           </Container>
           {!isShare && (
             <Footer>
diff --git a/docker-compose.yml b/docker-compose.yml
index 1974f02c8..120369c99 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,11 +1,11 @@
 services:
   redis:
-    image: redis
+    image: docker.io/library/redis
     ports:
       - "127.0.0.1:6379:6379"
     user: "redis:redis"
   postgres:
-    image: postgres
+    image: docker.io/library/postgres
     ports:
       - "127.0.0.1:5432:5432"
     environment:
diff --git a/package.json b/package.json
index c223ff228..edc8d7445 100644
--- a/package.json
+++ b/package.json
@@ -38,7 +38,7 @@
     "url": "https://github.com/sponsors/outline"
   },
   "engines": {
-    "node": ">= 18 <=20"
+    "node": ">= 18 <=22"
   },
   "repository": {
     "type": "git",
diff --git a/plugins/email/server/auth/email.ts b/plugins/email/server/auth/email.ts
index 612396d80..2f40b6db6 100644
--- a/plugins/email/server/auth/email.ts
+++ b/plugins/email/server/auth/email.ts
@@ -1,22 +1,25 @@
 import Router from "koa-router";
 import { NotificationEventType } from "@shared/types";
 import { parseDomain } from "@shared/utils/domains";
+import { parseEmail } from "@shared/utils/email";
+import accountProvisioner from "@server/commands/accountProvisioner";
 import InviteAcceptedEmail from "@server/emails/templates/InviteAcceptedEmail";
-import SigninEmail from "@server/emails/templates/SigninEmail";
 import WelcomeEmail from "@server/emails/templates/WelcomeEmail";
 import env from "@server/env";
-import { AuthorizationError } from "@server/errors";
+import Logger from "@server/logging/Logger";
 import { rateLimiter } from "@server/middlewares/rateLimiter";
 import validate from "@server/middlewares/validate";
-import { User, Team } from "@server/models";
+import { Team } from "@server/models";
 import { APIContext } from "@server/types";
 import { RateLimiterStrategy } from "@server/utils/RateLimiter";
 import { signIn } from "@server/utils/authentication";
-import { getUserForEmailSigninToken } from "@server/utils/jwt";
 import * as T from "./schema";
 
 const router = new Router();
 
+// FIXME: ONLY FOR SELF HOSTED, DON'T USE IN OTHER ENVIRONMENT.
+//        HASN'T FULLY TESTED, MALFUNCTIONAL MAY HAPPENS.
+
 router.post(
   "email",
   rateLimiter(RateLimiterStrategy.TenPerHour),
@@ -39,77 +42,53 @@ router.post(
       });
     }
 
-    if (!team?.emailSigninEnabled) {
-      throw AuthorizationError();
-    }
-
-    const user = await User.scope("withAuthentications").findOne({
-      where: {
-        teamId: team.id,
-        email: email.toLowerCase(),
+    // Example: email="hello@sub.world.local", host="local.outline.dev":
+    const { local } = parseEmail(email);
+    const param = {
+      ip: ctx.ip,
+      // The team is correspoding to a host, therefore 1 host to 1 team.
+      // For self-hosted, we may have only one team.
+      team: {
+        teamId: team?.id,
+        name: env.APP_NAME,
+        // Seems like the `domain` and `subdomain` are just used for the team
+        // lookup, and for `!env.isClousHosted`, these values isn't really
+        // matters, it always fetched the arbitrary team (or the latest).
+        // For the real team, it means for a organization email, and in that
+        // case it's matter.
+        domain: domain.host /* ="local.outline.dev"*/,
+        subdomain: domain.teamSubdomain /* =""*/,
+      },
+      user: {
+        name: local /* ="hello"*/,
+        email /* ="hello@sub.world.local"*/,
+      },
+      authenticationProvider: {
+        name: "email",
+        providerId: domain.host /* ="local.outline.dev"*/,
+      },
+      // This will be ignored by @see server/models/AuthenticationProviders.ts
+      // with oauthClient().
+      authentication: {
+        // If a user is logined with multiple oauth, the providerId is used to
+        // distinguish which provider is really the user logging in.
+        // For us, email can only have one, there it's.
+        // TODO: What does the "scopes" do?
+        providerId: email /* ="hello@sub.world.local"*/,
+        scopes: [],
       },
-    });
-
-    if (!user) {
-      ctx.body = {
-        success: true,
-      };
-      return;
-    }
-
-    // If the user matches an email address associated with an SSO
-    // provider then just forward them directly to that sign-in page
-    if (user.authentications.length) {
-      const authenticationProvider =
-        user.authentications[0].authenticationProvider;
-      ctx.body = {
-        redirect: `${team.url}/auth/${authenticationProvider?.name}`,
-      };
-      return;
-    }
-
-    // send email to users email address with a short-lived token
-    await new SigninEmail({
-      to: user.email,
-      token: user.getEmailSigninToken(),
-      teamUrl: team.url,
-      client,
-    }).schedule();
-
-    user.lastSigninEmailSentAt = new Date();
-    await user.save();
-
-    // respond with success regardless of whether an email was sent
-    ctx.body = {
-      success: true,
     };
-  }
-);
-
-router.get(
-  "email.callback",
-  validate(T.EmailCallbackSchema),
-  async (ctx: APIContext<T.EmailCallbackReq>) => {
-    const { token, client, follow } = ctx.input.query;
 
-    // The link in the email does not include the follow query param, this
-    // is to help prevent anti-virus, and email clients from pre-fetching the link
-    // and spending the token before the user clicks on it. Instead we redirect
-    // to the same URL with the follow query param added from the client side.
-    if (!follow) {
-      return ctx.redirectOnClient(ctx.request.href + "&follow=true");
+    // @see plugins/oidc/server/auth.oidc.ts, passport.use
+    const result = await accountProvisioner(param);
+    if (result.isNewUser) {
+      // TODO: Logger.info? Examples are in server/index.ts.
+      Logger.info("email", JSON.stringify(param));
     }
+    team = result.team;
+    const user = result.user;
 
-    let user!: User;
-
-    try {
-      user = await getUserForEmailSigninToken(token as string);
-    } catch (err) {
-      ctx.redirect(`/?notice=expired-token`);
-      return;
-    }
-
-    if (!user.team.emailSigninEnabled) {
+    if (!team?.emailSigninEnabled) {
       return ctx.redirect("/?notice=auth-error");
     }
 
@@ -121,7 +100,7 @@ router.get(
       await new WelcomeEmail({
         to: user.email,
         role: user.role,
-        teamUrl: user.team.url,
+        teamUrl: team.url,
       }).schedule();
 
       const inviter = await user.$get("invitedBy");
@@ -132,19 +111,24 @@ router.get(
           to: inviter.email,
           inviterId: inviter.id,
           invitedName: user.name,
-          teamUrl: user.team.url,
+          teamUrl: team.url,
         }).schedule();
       }
     }
 
     // set cookies on response and redirect to team subdomain
-    await signIn(ctx, "email", {
-      user,
-      team: user.team,
-      isNewTeam: false,
-      isNewUser: false,
-      client,
-    });
+    await signIn(ctx, "email", { ...result, client });
+
+    // Overwrite the redirection, we make the frontend to do so, instead of the
+    // request itself (signIn will redirect the POST request, rather then set a
+    // new window location).
+    // @see app/scenes/Login/components/AuthenticationProvider.tsx, handleSubmitEmail
+    // @see koajs/koa/lib/response.js, redirect
+    ctx.status = 200;
+    ctx.body = {
+      success: true,
+      redirect: env.URL,
+    };
   }
 );
 
diff --git a/plugins/email/server/index.ts b/plugins/email/server/index.ts
index 6e01e3bfc..6675014fd 100644
--- a/plugins/email/server/index.ts
+++ b/plugins/email/server/index.ts
@@ -1,14 +1,9 @@
-import env from "@server/env";
 import { Hook, PluginManager } from "@server/utils/PluginManager";
 import config from "../plugin.json";
 import router from "./auth/email";
 
-const enabled = !!(env.SMTP_HOST || env.SMTP_SERVICE) || env.isDevelopment;
-
-if (enabled) {
-  PluginManager.add({
-    ...config,
-    type: Hook.AuthProvider,
-    value: { router, id: config.id },
-  });
-}
+PluginManager.add({
+  ...config,
+  type: Hook.AuthProvider,
+  value: { router, id: config.id },
+});
diff --git a/server/env.ts b/server/env.ts
index 34f926029..cd685cf50 100644
--- a/server/env.ts
+++ b/server/env.ts
@@ -623,6 +623,21 @@ export class Environment {
   @Public
   public APP_NAME = "Outline";
 
+  /**
+   * The footer, will be shown in shared post (if you're no logged in).
+   */
+  @Public
+  @IsOptional()
+  public SHARE_FOOTER_TEXT = this.toOptionalString(
+    environment.SHARE_FOOTER_TEXT
+  );
+
+  @Public
+  @IsOptional()
+  public SHARE_FOOTER_HREF = this.toOptionalString(
+    environment.SHARE_FOOTER_HREF
+  );
+
   /**
    * Returns true if the current installation is the cloud hosted version at
    * getoutline.com
diff --git a/server/models/helpers/AuthenticationHelper.ts b/server/models/helpers/AuthenticationHelper.ts
index 6e85bbd80..dd9e3d8dd 100644
--- a/server/models/helpers/AuthenticationHelper.ts
+++ b/server/models/helpers/AuthenticationHelper.ts
@@ -28,13 +28,6 @@ export default class AuthenticationHelper {
     return AuthenticationHelper.providers
       .sort((hook) => (hook.value.id === "email" ? 1 : -1))
       .filter((hook) => {
-        // Email sign-in is an exception as it does not have an authentication
-        // provider using passport, instead it exists as a boolean option.
-        if (hook.value.id === "email") {
-          return team?.emailSigninEnabled;
-        }
-
-        // If no team return all possible authentication providers except email.
         if (!team) {
           return true;
         }
diff --git a/server/routes/app.ts b/server/routes/app.ts
index cd57a2bdd..4d06f14fd 100644
--- a/server/routes/app.ts
+++ b/server/routes/app.ts
@@ -82,6 +82,12 @@ export const renderApp = async (
     });
   }
 
+  // TODO: Better ways?
+  const appShareId = ctx.headers["x-outline-shareid"];
+  if (appShareId) {
+    options.rootShareId = appShareId.toString();
+  }
+
   const { shareId } = ctx.params;
   const page = await readIndexFile();
   const environment = `
diff --git a/server/utils/getInstallationInfo.ts b/server/utils/getInstallationInfo.ts
index 1d11a426c..0ae8117aa 100644
--- a/server/utils/getInstallationInfo.ts
+++ b/server/utils/getInstallationInfo.ts
@@ -1,58 +1,11 @@
 import { version } from "../../package.json";
-import fetch from "./fetch";
-
-const dockerhubLink =
-  "https://hub.docker.com/v2/repositories/outlinewiki/outline";
-
-function isFullReleaseVersion(versionName: string): boolean {
-  const releaseRegex = /^(version-)?\d+\.\d+\.\d+$/; // Matches "N.N.N" or "version-N.N.N" for dockerhub releases before v0.56.0"
-  return releaseRegex.test(versionName);
-}
 
 export async function getVersionInfo(currentVersion: string): Promise<{
   latestVersion: string;
   versionsBehind: number;
 }> {
-  let allVersions: string[] = [];
-  let latestVersion: string | null = null;
-  let nextUrl: string | null =
-    dockerhubLink + "/tags?name=&ordering=last_updated&page_size=100";
-
-  // Continue fetching pages until the required versions are found or no more pages
-  while (nextUrl) {
-    const response = await fetch(nextUrl);
-    const data = await response.json();
-
-    // Map and filter the versions to keep only full releases
-    const pageVersions = data.results
-      .map((result: any) => result.name)
-      .filter(isFullReleaseVersion);
-
-    allVersions = allVersions.concat(pageVersions);
-
-    // Set the latest version if not already set
-    if (!latestVersion && pageVersions.length > 0) {
-      latestVersion = pageVersions[0];
-    }
-
-    // Check if the current version is found
-    const currentIndex = allVersions.findIndex(
-      (version: string) => version === currentVersion
-    );
-
-    if (currentIndex !== -1) {
-      const versionsBehind = currentIndex; // The number of versions behind
-      return {
-        latestVersion: latestVersion || currentVersion, // Fallback to current if no latest found
-        versionsBehind,
-      };
-    }
-
-    nextUrl = data.next || null;
-  }
-
   return {
-    latestVersion: latestVersion || currentVersion,
+    latestVersion: currentVersion,
     versionsBehind: -1, // Return -1 if current version is not found
   };
 }
diff --git a/shared/utils/domains.ts b/shared/utils/domains.ts
index d9a95bf19..38d5f4ed5 100644
--- a/shared/utils/domains.ts
+++ b/shared/utils/domains.ts
@@ -18,7 +18,7 @@ export function slugifyDomain(domain: string) {
   return domain.split(".").slice(0, -1).join("-");
 }
 
-// strips protocol and whitespace from input
+// strips protocol, port and whitespace from input
 // then strips the path and query string
 function normalizeUrl(url: string) {
   return trim(url.replace(/(https?:)?\/\//, "")).split(/[/:?]/)[0];
