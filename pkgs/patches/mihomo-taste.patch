From f7f36cea6602d7b0de3f125c8be07005db854913 Mon Sep 17 00:00:00 2001
From: Zigit Zo <ptr@ffi.fyi>
Date: Sat, 14 Dec 2024 00:42:27 +0800
Subject: [PATCH] feat(mihomo): hack

---
 Makefile                      |  2 +-
 README.md                     | 57 ++++++++++++++++++++++
 component/fakeip/pool.go      | 22 +++++----
 component/fakeip/pool_test.go | 44 ++++++++++++++++-
 config/config.go              | 90 +++++++++++++++++++++++++++++++++++
 openwrt.sh                    |  9 ++++
 6 files changed, 214 insertions(+), 10 deletions(-)
 create mode 100755 openwrt.sh

diff --git a/Makefile b/Makefile
index 36c640d553..425e08bd54 100644
--- a/Makefile
+++ b/Makefile
@@ -48,7 +48,7 @@ WINDOWS_ARCH_LIST = \
 
 all:linux-amd64 linux-arm64\
 	darwin-amd64 darwin-arm64\
- 	windows-amd64 windows-arm64\
+	windows-amd64 windows-arm64\
 
 
 darwin-all: darwin-amd64 darwin-arm64
diff --git a/README.md b/README.md
index d38fbedd8a..69714e016f 100644
--- a/README.md
+++ b/README.md
@@ -30,6 +30,63 @@
 - Netfilter TCP redirecting. Deploy Mihomo on your Internet gateway with `iptables`.
 - Comprehensive HTTP RESTful API controller
 
+## Hacks
+
+* Yaml config can now support prepend/append, e.g.
+
+```yaml
+rules:
+  - DOMAIN-SUFFIX,google.com,PROXY
+  - DOMAIN-SUFFIX,github.com,PROXY
+
+dns:
+  fake-ip-filter:
+    - +.gov.cn
+    - +.edu.cn
+
+# Prepend:
++rules:
+  - DOMAIN-SUFFIX,gnu.org,PROXY
+
+dns.+fake-ip-filter:
+  - +.ac.cn
+
+# Append:
+rules+:
+  - DOMAIN-SUFFIX,kernel.org,PROXY
+
+dns.fake-ip-filter+:
+  - +.gd.cn
+```
+
+* Support `dns.fake-ip-reverse` configuration, it has higher priority and match the opposite of `dns.fake-ip-filter`, e.g.
+
+```yaml
+dns:
+  # Blacklist: these matched domains will not return faked ip:
+  fake-ip-filter-mode: blacklist
+  fake-ip-filter:
+    - +.cn
+  # BUT, following "reverse" will force these domains return faked ip:
+  fake-ip-reverse:
+    - +.googleapis.cn
+  # Result:
+  #  nslookup google.cn => real_ip
+  #  nslookup services.googleapis.cn => fake_ip
+
+dns:
+  # Whitelist: only these matched domains will return faked ip:
+  fake-ip-filter-mode: whitelist
+  fake-ip-filter:
+    - geosite:gfw
+  # BUT, following "reverse" will not let these domains return faked ip:
+  fake-ip-reverse:
+    - +.github.com
+  # Result:
+  #  nslookup google.com => fake_ip
+  #  nslookup github.com => real_ip
+```
+
 ## Dashboard
 
 A web dashboard with first-class support for this project has been created; it can be checked out at [metacubexd](https://github.com/MetaCubeX/metacubexd).
diff --git a/component/fakeip/pool.go b/component/fakeip/pool.go
index 41b848b3fb..40b73b9505 100644
--- a/component/fakeip/pool.go
+++ b/component/fakeip/pool.go
@@ -35,6 +35,7 @@ type Pool struct {
 	offset  netip.Addr
 	cycle   bool
 	mux     sync.Mutex
+	Reverse []C.DomainMatcher
 	host    []C.DomainMatcher
 	mode    C.FilterMode
 	ipnet   netip.Prefix
@@ -67,20 +68,25 @@ func (p *Pool) LookBack(ip netip.Addr) (string, bool) {
 
 // ShouldSkipped return if domain should be skipped
 func (p *Pool) ShouldSkipped(domain string) bool {
-	should := p.shouldSkipped(domain)
-	if p.mode == C.FilterWhiteList {
-		return !should
+	// In blacklist mode, we skip matched item, but in whitelist, we can't:
+	skipMatched := p.mode == C.FilterBlackList
+
+	// We have a higher priority matching, check it:
+	for _, matcher := range p.Reverse {
+		if matcher.MatchDomain(domain) {
+			// Blacklist (expect true), Reversed to Whitelist, expecting false
+			// Whitelist (expect false), Reversed to Blacklist, expecting true
+			return !skipMatched
+		}
 	}
-	return should
-}
 
-func (p *Pool) shouldSkipped(domain string) bool {
 	for _, matcher := range p.host {
 		if matcher.MatchDomain(domain) {
-			return true
+			return skipMatched
 		}
 	}
-	return false
+
+	return !skipMatched /* aka. skipUnmatched */
 }
 
 // Exist returns if given ip exists in fake-ip pool
diff --git a/component/fakeip/pool_test.go b/component/fakeip/pool_test.go
index be78b87c71..126935d0e8 100644
--- a/component/fakeip/pool_test.go
+++ b/component/fakeip/pool_test.go
@@ -162,7 +162,7 @@ func TestPool_Skip(t *testing.T) {
 	for _, pool := range pools {
 		assert.True(t, pool.ShouldSkipped("example.com"))
 		assert.False(t, pool.ShouldSkipped("foo.com"))
-		assert.False(t, pool.shouldSkipped("baz.com"))
+		assert.False(t, pool.ShouldSkipped("baz.com"))
 	}
 }
 
@@ -187,6 +187,48 @@ func TestPool_SkipWhiteList(t *testing.T) {
 	}
 }
 
+func testSkipReverse(t *testing.T, mode C.FilterMode) {
+	ipnet := netip.MustParsePrefix("192.168.0.1/29")
+	tree := trie.New[struct{}]()
+	assert.NoError(t, tree.Insert("+.net", struct{}{}))
+	assert.False(t, tree.IsEmpty())
+	pools, tempfile, err := createPools(Options{
+		IPNet: ipnet,
+		Size:  10,
+		Host:  []C.DomainMatcher{tree.NewDomainSet()},
+		Mode:  mode,
+	})
+	assert.Nil(t, err)
+	defer os.Remove(tempfile)
+
+	reverse := trie.New[struct{}]()
+	assert.NoError(t, reverse.Insert("test.net", struct{}{}))
+	assert.False(t, reverse.IsEmpty())
+	var matcher C.DomainMatcher = reverse.NewDomainSet()
+
+	if mode == C.FilterBlackList {
+		for _, pool := range pools {
+			pool.Reverse = append(pool.Reverse, matcher)
+			assert.False(t, pool.ShouldSkipped("test.net"))
+			assert.True(t, pool.ShouldSkipped("only.net"))
+		}
+	} else {
+		for _, pool := range pools {
+			pool.Reverse = append(pool.Reverse, matcher)
+			assert.True(t, pool.ShouldSkipped("test.net"))
+			assert.False(t, pool.ShouldSkipped("only.net"))
+		}
+	}
+}
+
+func TestPool_SkipReverse(t *testing.T) {
+	testSkipReverse(t, C.FilterBlackList)
+}
+
+func TestPool_SkipWhitelistReverse(t *testing.T) {
+	testSkipReverse(t, C.FilterWhiteList)
+}
+
 func TestPool_MaxCacheSize(t *testing.T) {
 	ipnet := netip.MustParsePrefix("192.168.0.1/24")
 	pool, _ := New(Options{
diff --git a/config/config.go b/config/config.go
index ba6097bcf7..2a06e68d22 100644
--- a/config/config.go
+++ b/config/config.go
@@ -220,6 +220,7 @@ type RawDNS struct {
 	FakeIPRange                  string                              `yaml:"fake-ip-range" json:"fake-ip-range"`
 	FakeIPFilter                 []string                            `yaml:"fake-ip-filter" json:"fake-ip-filter"`
 	FakeIPFilterMode             C.FilterMode                        `yaml:"fake-ip-filter-mode" json:"fake-ip-filter-mode"`
+	FakeIPReverse                []string                            `yaml:"fake-ip-reverse" json:"fake-ip-reverse"`
 	DefaultNameserver            []string                            `yaml:"default-nameserver" json:"default-nameserver"`
 	CacheAlgorithm               string                              `yaml:"cache-algorithm" json:"cache-algorithm"`
 	NameServerPolicy             *orderedmap.OrderedMap[string, any] `yaml:"nameserver-policy" json:"nameserver-policy"`
@@ -496,6 +497,7 @@ func DefaultRawConfig() *RawConfig {
 				"www.msftconnecttest.com",
 			},
 			FakeIPFilterMode: C.FilterBlackList,
+			FakeIPReverse:    []string{},
 		},
 		NTP: RawNTP{
 			Enable:        false,
@@ -564,7 +566,67 @@ func DefaultRawConfig() *RawConfig {
 	}
 }
 
+func tryAppend(node map[string]interface{}) {
+	// Due to limitation of yaml, we can't have duplicate keys, therefore all
+	//  nested keys must represent as "a.b.c+" format.
+	// And for this limitation, we only loop one level, no recursion.
+	for k, v := range node {
+		switch v.(type) {
+		/*
+			case map[string]interface{}:
+				tryAppend(v.(map[string]interface{}))
+				continue
+		*/
+		case []interface{}:
+			prefixes := strings.Split(k, ".")
+			key := prefixes[len(prefixes)-1]
+			prefixes = prefixes[:len(prefixes)-1]
+			isPrepend := false
+
+			// "a.b.+c" or "a.b.c+":
+			if strings.HasPrefix(key, "+") {
+				key = key[1:]
+				isPrepend = true
+			} else if strings.HasSuffix(key, "+") {
+				key = key[:len(key)-1]
+			} else {
+				continue
+			}
+
+			// Fetch the real value:
+			lastNode := node
+			for len(prefixes) != 0 {
+				lastNode = lastNode[prefixes[0]].(map[string]interface{})
+				prefixes = prefixes[1:]
+			}
+
+			// TODO: Optimize:
+			values := lastNode[key].([]interface{})
+			appendValues := v.([]interface{})
+			if isPrepend {
+				lastNode[key] = append(appendValues, values...)
+			} else {
+				lastNode[key] = append(values, appendValues...)
+			}
+		}
+	}
+}
+
 func UnmarshalRawConfig(buf []byte) (*RawConfig, error) {
+	node := new(map[string]interface{})
+	if err := yaml.Unmarshal(buf, node); err != nil {
+		return nil, err
+	}
+
+	// Find append:
+	tryAppend(*node)
+
+	// Re-marshal to verify the appended, and to reload the final config:
+	buf, err := yaml.Marshal(node)
+	if err != nil {
+		return nil, err
+	}
+
 	// config with default value
 	rawCfg := DefaultRawConfig()
 
@@ -572,6 +634,14 @@ func UnmarshalRawConfig(buf []byte) (*RawConfig, error) {
 		return nil, err
 	}
 
+	/*
+		// Re-dump the final configurations, for debugging only:
+		buf, err = yaml.Marshal(rawCfg)
+		if err == nil {
+			log.Infoln("\t===== YAML START =====\n%s\t===== YAML   END =====", buf)
+		}
+	*/
+
 	return rawCfg, nil
 }
 
@@ -1460,6 +1530,26 @@ func parseDNS(rawCfg *RawConfig, hosts *trie.DomainTrie[resolver.HostValue], rul
 			return nil, err
 		}
 
+		/**
+		 * Reverse has higher priority, it filp the result.
+		 * e.g.
+		 *  fake-ip-filter:
+		 *   - +.cn
+		 *  fake-ip-filter-mode: blacklist
+		 *  fake-ip-reverse:
+		 *   - mistake.cn
+		 * Results `mistake.cn` get "whitelisted", i.e. it will be faked ip.
+		 * Works in the same manner of `whitelist` mode.
+		 */
+		if len(cfg.FakeIPReverse) != 0 {
+			reverse, err := parseDomain(cfg.FakeIPReverse, nil, "dns.fake-ip-reverse", ruleProviders)
+			if err != nil {
+				return nil, err
+			}
+
+			pool.Reverse = reverse
+		}
+
 		dnsCfg.FakeIPRange = pool
 	}
 
diff --git a/openwrt.sh b/openwrt.sh
new file mode 100755
index 0000000000..341e409d6d
--- /dev/null
+++ b/openwrt.sh
@@ -0,0 +1,9 @@
+#!/bin/sh
+
+set -xeu
+
+PLATFORM="linux-amd64"
+
+make "$PLATFORM"
+cp "bin/mihomo-$PLATFORM" /usr/bin/mihomo
+/usr/bin/mihomo -v
