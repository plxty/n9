diff --git a/extension.js b/extension.js
index 8dfc884..0bc5b55 100644
--- a/extension.js
+++ b/extension.js
@@ -50,7 +50,7 @@ let gsettings = null;
 import { Fields } from "./fields.js";
 const IBUS_SYSTEMD_SERVICE = "org.freedesktop.IBus.session.GNOME.service";
 const UNKNOWN = { ON: 0, OFF: 1, DEFAULT: 2 };
-const ASCIIMODES = ["en", "A", "英"];
+const ASCIIMODES = ["en", "A", "I", "英"];
 const INDICATORANI = ["NONE", "SLIDE", "FADE", "FULL"];
 const INPUTMODE = "InputMode";
 const BGMODES = ["Centered", "Repeated", "Zoom"];
@@ -564,7 +564,6 @@ const IBusAutoSwitch = GObject.registerClass(
     constructor() {
       super();
       this._bindSettings();
-      this._tmpWindow = null;
       this._overviewHiddenID = Main.overview.connect(
         "hidden",
         this._onWindowChanged.bind(this),
@@ -577,6 +576,8 @@ const IBusAutoSwitch = GObject.registerClass(
         "notify::focus-window",
         this._onWindowChanged.bind(this),
       );
+      this._updatePropertyID = null;
+      this._timeoutID = null;
     }
 
     get _state() {
@@ -587,42 +588,40 @@ const IBusAutoSwitch = GObject.registerClass(
       return ASCIIMODES.includes(text);
     }
 
-    get _toggle() {
-      let win = InputSourceManager._getCurrentWindow();
-      if (!win) return false;
-
-      let state = this._state;
-      let stateConf = false;
-      if (this._remember) {
-        let store = this._states.get(this._tmpWindow);
-        if (state !== store) this._states.set(this._tmpWindow, state);
-
-        this._tmpWindow = win.wm_class ? win.wm_class.toLowerCase() : "";
-        if (!this._states.has(this._tmpWindow)) {
-          let unknown =
-            this.unknown === UNKNOWN.DEFAULT
-              ? state
-              : this.unknown === UNKNOWN.ON;
-          this._states.set(this._tmpWindow, unknown);
-        }
-        stateConf = this._states.get(this._tmpWindow);
-      } else {
-        stateConf =
-          this.unknown === UNKNOWN.DEFAULT
-            ? state
-            : this.unknown === UNKNOWN.ON;
-      }
-
-      return state ^ stateConf;
-    }
-
     set remember(remember) {
       this._remember = remember;
     }
 
     _onWindowChanged() {
-      if (this._toggle && IBusManager._panelService) {
-        IBusManager.activateProperty(INPUTMODE, IBus.PropState.CHECKED);
+      if (!this._remember || !IBusManager._panelService)
+        return;
+
+      if (!this._updatePropertyID) {
+        this._updatePropertyID = IBusManager._panelService.connect(
+          "update-property",
+          (engineName, prop) => {
+            if (prop.get_key() !== INPUTMODE)
+              return;
+            const win = InputSourceManager._getCurrentWindow();
+            if (win && win.wm_class)
+              this._states.set(win.wm_class.toLowerCase(), this._state);
+          },
+        );
+      }
+
+      if (this._timeoutID) {
+        clearTimeout(this._timeoutID);
+        this._timeoutID = null;
+      }
+
+      const win = InputSourceManager._getCurrentWindow();
+      if (win && win.wm_class && this._states.get(win.wm_class.toLowerCase()) != this._state) {
+        // workaround for the timing issue of ibus-rime...
+        this._timeoutID = setTimeout(() => {
+          IBusManager.activateProperty(INPUTMODE, IBus.PropState.CHECKED);
+          this._timeoutID = null;
+          console.log("auto switch! state", stats, "->", this._state);
+        }, 64);
       }
     }
 
@@ -658,6 +657,14 @@ const IBusAutoSwitch = GObject.registerClass(
       if (this._overviewHiddenID)
         Main.overview.disconnect(this._overviewHiddenID),
           (this._overviewHiddenID = 0);
+      if (this._timeoutID) {
+        clearTimeout(this._timeoutID);
+        this._timeoutID = null;
+      }
+      if (this._updatePropertyID) {
+        IBusManager._panelService.disconnect(this._updatePropertyID);
+        this._updatePropertyID = null;
+      }
     }
   },
 );
