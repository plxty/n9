diff --git a/extension.js b/extension.js
index 8dfc884..24dbba5 100644
--- a/extension.js
+++ b/extension.js
@@ -564,7 +564,6 @@ const IBusAutoSwitch = GObject.registerClass(
     constructor() {
       super();
       this._bindSettings();
-      this._tmpWindow = null;
       this._overviewHiddenID = Main.overview.connect(
         "hidden",
         this._onWindowChanged.bind(this),
@@ -577,6 +576,10 @@ const IBusAutoSwitch = GObject.registerClass(
         "notify::focus-window",
         this._onWindowChanged.bind(this),
       );
+      this._updatePropertyID = null;
+      this._timeoutID = null;
+      this._prevState = null;
+      this._prevWindow = null;
     }
 
     get _state() {
@@ -587,43 +590,52 @@ const IBusAutoSwitch = GObject.registerClass(
       return ASCIIMODES.includes(text);
     }
 
-    get _toggle() {
-      let win = InputSourceManager._getCurrentWindow();
-      if (!win) return false;
-
-      let state = this._state;
-      let stateConf = false;
-      if (this._remember) {
-        let store = this._states.get(this._tmpWindow);
-        if (state !== store) this._states.set(this._tmpWindow, state);
-
-        this._tmpWindow = win.wm_class ? win.wm_class.toLowerCase() : "";
-        if (!this._states.has(this._tmpWindow)) {
-          let unknown =
-            this.unknown === UNKNOWN.DEFAULT
-              ? state
-              : this.unknown === UNKNOWN.ON;
-          this._states.set(this._tmpWindow, unknown);
-        }
-        stateConf = this._states.get(this._tmpWindow);
-      } else {
-        stateConf =
-          this.unknown === UNKNOWN.DEFAULT
-            ? state
-            : this.unknown === UNKNOWN.ON;
-      }
-
-      return state ^ stateConf;
-    }
-
     set remember(remember) {
       this._remember = remember;
     }
 
     _onWindowChanged() {
-      if (this._toggle && IBusManager._panelService) {
-        IBusManager.activateProperty(INPUTMODE, IBus.PropState.CHECKED);
+      const win = InputSourceManager._getCurrentWindow();
+      if (!(this._remember && IBusManager._panelService && win))
+        return;
+
+      if (!this._updatePropertyID) {
+        this._updatePropertyID = IBusManager._panelService.connect("update-property", (engineName, prop) => {
+          if (prop.get_key() === INPUTMODE) {
+            this._prevState = this._state;
+            // console.log("update state", this._state);
+          }
+        });
       }
+
+      if (this._timeoutID)
+        clearTimeout(this._timeoutID);
+
+      // focus out
+      if (this._prevWindow != null && this._prevState != null) {
+        this._states.set(this._prevWindow, this._prevState);
+        // console.log("set state", this._prevState, this._prevWindow);
+      }
+
+      // focus in
+      const wmClass = win.wm_class ? win.wm_class.toLowerCase() : "";
+      this._timeoutID = setTimeout(() => {
+        const state = this._states.get(wmClass);
+        let target = this.unknown == UNKNOWN.ON;
+        if (this.unknown == UNKNOWN.DEFAULT)
+          target = this._state;
+
+        if (state != undefined && state != target) {
+          IBusManager.activateProperty(INPUTMODE, IBus.PropState.CHECKED);
+          // console.log("auto switch! state", state, "->", target, wmClass);
+        }
+
+        // TODO: handle via ibus-rime? to avoid such delay...
+        this._timeoutID = null;
+      }, 100);
+
+      // previous
+      this._prevWindow = wmClass;
     }
 
     _bindSettings() {
@@ -658,6 +670,14 @@ const IBusAutoSwitch = GObject.registerClass(
       if (this._overviewHiddenID)
         Main.overview.disconnect(this._overviewHiddenID),
           (this._overviewHiddenID = 0);
+      if (this._updatePropertyID) {
+        IBusManager._panelService.disconnect(this._updatePropertyID);
+        this._updatePropertyID = null;
+      }
+      if (this._timeoutID) {
+        clearTimeout(this._timeoutID);
+        this._timeoutID = null;
+      }
     }
   },
 );
